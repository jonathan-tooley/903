
(FLOATING POINT PACKAGE - 23/01/12)


(QF		ISSUE 2)
(QFINOUT	ISSUE 2)
(QFMATH		ISSUE 5)

(QF - floating point interpreter)

[ QF LN EXP SQRT SIN COS ARCTAN ]


QF +0 ( PSEUDO-S.C.R.;CONTAINS ADDRESS OF INSTRUCTION OBEYED )
 8 EXIT+3 (PACKED ENTRY )
 8 EXIT+5 (UNPACKED ENTRY )
 +0  (INTEGER TO REAL ADDRESS)
 +0  (REAL TO INTEGER ADDRESS)
 +0  (FRACTION TO REAL ADDRESS )
 +0  (REAL TO FRACTION ADDRESS)
 8 ERROR

EXIT 0 QF
 /8 1
 +0  (FORMAT PARAMETER)
 4 +1
 8 ;+2
 4 +0
 5 ;-4
 8 INTERP



FUNCTION +0
ADDRESS +0
WS
FBREG +0

DLAMS
FPA +0
DLALS +0
 +0

FPB +0
 +0
 +0
LINK +0  (USED FOR SEVERAL SUBROUTINES )
WS8 +0
WS9 +0
WS10 +0
WS11 +0
WS12 +0
WS13 +0
WS14 +0
WS15 +0
WS16 +0
WS17 +0
WS18 +0
WS19 +0
WS20 +0
WS21 +0
WS22 +0
WS23 +0
WS24 +0
WS25 +0
WS26 +0
WS27 +0
WS28 +0
WS29 +0
WS30 +0
WS31 +0
WS32 +0
WS33 +0




DECODE 8 SETMOD (TRANSFER CONTROL TO APPROPRIATE ROUTINE)
 8 FADD
 8 FNADD
 8 FEXC
 8 FREAD
 8 FWRITE
 8 FCHANGE
 8 JZERO
 8 JUMP
 8 JNEG
 8 COUNT
 8 SAVELK
 8 FMUL
 8 FDIV
 8 FSHIFT
 8 ERRF



INTERP 10 QF
 0 QF
 /4 0
 7 EXIT
 6 +8191
 5 ADDRESS
 4 QF
 6 =15 0
 1 ADDRESS
 5 ADDRESS
 /4 0
 14 8179
 9 ;+4
 5 FUNCTION
 0 FUNCTION
 /8 DECODE
 6 +15
 5 FUNCTION
 4 ADDRESS
 1 FBREG
 5 ADDRESS
 8 ;-7



(THESE SUBROUTINES ASSUME THAT THE B REGISTER IS SET ON ENTRY TO THE FIRST ADDRESS )

 BTOFA /4 0 (PLACE FP NUMBER IN FPA)
 5 FPA
 4 EXIT+2
 7 ;+10      ( THE JUMP WILL BE TAKEN FOR  UNPACKED FORMAT )
 /4 1
 14 11
 14 8181
 5 FPA+2
 /4 1
 6 &377600
 5 FPA+1
SROUT 0 LINK
 /8 1
 /4 1
 5 FPA+1
 /4 2
 5 FPA+2
 8 ;-6

BTOFB /4 0 (PLACE FP NUMBER UNPACKED IN FPB)
 5 FPB
 4 EXIT+2
 7 ;+9
 /4 1
 14 11
 14 8181
 5 FPB+2
 /4 1
 6 &377600
 5 FPB+1
8 SROUT
 /4 1
 5 FPB+1
 /4 2
 5 FPB+2
 8 SROUT

 +0
FATOB 4 FPA (STORE CONTENTS OF FPA )
 /5 0
 4 EXIT+2
 7 STUNPK
 4 FPA+2
 1 +64 (EXP LESS -64 TEST )
 9 STZERO
 2 +127
 9 ERRO (EXP GR +64 )
 4 FPA+2
 6 &177
 5 FATOB-1
 4 FPA
 9 PKNEG
 4 FPA+1
 1 +64 (ROUND POSITIVE NUMBER )
 6 &777600
 1 FATOB-1
 9 ;+3
 /5 1
 8 SROUT
 6 +131071 (CARRY ONE )
 /5 1
 /10 0
 /4 0
 9 ;+2
 8 SROUT
 4 =8 0 (OVERFLOW IN MANTISSA )
 /5 0
 4 FPA+2
 1 +1
 2 +63
 9 ERRO (OVERFLOW IN EXPONENT )
 2 +63
 6 &177
 /5 1
 8 SROUT
STZERO 4 +0
 /5 0
 /5 1
 8 SROUT
PKNEG 4 FPA+1 (ROUTINE ROUNDS AWAY FROM ZERO)
 8 FATOB+16
STUNPK 4 FPA+1
 /5 1
 4 FPA+2
 /5 2
 8 SROUT



SCOUNT +0
SCTCORR +0
FSTAND 4 +0 (STANDARDISE FPA)
 5 SCOUNT
 5 SCTCORR
 4 FPA
 9 NEGST
 7 SB1
 6 &777400
 7 SMR
 14 1
 9 ;+3
 10 SCOUNT
 8 ;-3
 4 SCOUNT
 1 SCTCORR
 5 SCOUNT
 1 =14 0
 5 ;+4
 0 FPA+1
 14 1
 4 FPA
 14 0 (SHIFT FORMED BY PROGRAM )
 3 FPA+1
 5 FPA
 4 SCOUNT
 2 FPA+2
 5 FPA+2
 8 INTERP
SB1 4 +17
 5 SCTCORR
 4 FPA+1
 7 ;-5 (JUMP IF X=0)
 8 FSTAND+8
SMR 4 FPA (QUICKER TO SHIFT RIGHT )
 14 8191
 7 ;+3
 10 SCOUNT
 8 ;-3
 4 SCOUNT
 2 +16
 5 SCOUNT
 8 FSTAND+13

NEGST 2 =/15 8191
 7 SB3
 4 -1
 5 SCTCORR
 4 FPA
 14 1
 10 SCOUNT
 9 ;-2
 8 FSTAND+12
SB3 4 +17
 5 SCTCORR
 4 FPA+1
 14 1
 9 NEGST+5
 8 FSTAND+12



ERRF 0 ;+2
 (IMPERMISSIBLE FUNCTION)
 8 ERROR
 0 ;+1
 +50897  (FQ)
 +40993  ( .)
 8 15

ERRI 0 ;+2 (OVERFLOW ON REAL TO INTEGER)
 8 ERROR
 0 ;+1
 +54482  (TR)
 +8649  (.I)
 8 ;+1
 0 QF+4 (RECOVERY;PLACE +131071 OR -131072 )
 4 FPA (THIS IS ALSO USED FOR ERRFR)
 9 ;+4
 4 +131071
 /5 0
 8 INTERP
 4 =/0 0
 8 ;-3

ERRFR 0 ;+2 (OVERFLOW ON REAL TO FRACTION)
 8 ERROR
 0 ;+1
 +54482  (TR)
 +8646  (.F)
 8 ;+1
 0 QF+6 (RECOVERY;PLACE +.9999 OR -1.0)
 8 ERRI+6

ERRO 0 ;+2 (OVERFLOW ON 5 OR 13 INSTRUCTION )
 8 ERROR
 0 ;+1
 +53202  (OR)
 +8646  (.F)
 8 ;+1
 4 FUNCTION
 1 -5
 7 OF5
 1 -8
 7 OF13
 8 ERRF
OF5 0 ADDRESS (PACK LARGEST NUMBER OF CORRECT SIGN)
 4 FPA
 9 ;+6
 4 +131071
 /5 0
 4 &377677
 /5 1
 8 INTERP
 4 =/0 0
 /5 0
 4 +63
 /5 1
 8 INTERP
OF13 4 FPA (LOAD LARGEST NUMBER WITH SIGN OF FPA)
 9 ;+7
 4 +131071
 5 FPA
 5 FPA+1
 4 +63
 5 FPA+2
 8 INTERP
 4 =/0 0
 5 FPA
 4 +0
 5 FPA+1
 4 +63
 5 FPA+2
 8 INTERP

 +0  (FORWARD MODIFIER)
 +0  (BACKWARD MODIFIER)
 +0  (ERROR COUNT)
ERROR 4 +141 (OUTPUT NEWLINE)
 15 6148
 4 +10
 15 6148

 /4 0
 15 6148
 14 8184
 15 6148
 /4 1
 15 6148
 14 8184
 15 6148
 /4 2
 5 9 (THIS MUST BE CHANGED FOR EXTRA STORE MODULES)

 4 +141 (OUTPUT NEWLINE)
 15 6148
 4 +10
 15 6148

 4 -50 (GIVE VISIBLE SIGNAL)
 5 ERROR-1
 4 +0
 15 6144
 10 ERROR-1
 4 ERROR-1
 9 ;-4
 8 ;+0
(FOR EXTRA STORE MODULES THE WAIT LINK IS PLACED AS FOLLOWS)
( 11 ERROR-2
 3 ERROR-2
 4 ERROR-2
 2 +0
 5 ERROR-1
 /4 3
 1 =/0 0
 0 ERROR-1
 /5 15
 0 ERROR-2
 8 ;+0 )



SETMOD 0 ADDRESS (SET PSEUDO B REGISTER)
 /4 0
 5 FBREG
 8 INTERP



FADD 0 ADDRESS
 11 LINK
 8 BTOFB (GET SECOND OPERAND)
 4 FPB (ADD FPA TO FPB)
 7 INTERP
 4 FPA
 7 FEXC+6
 0 FPA+1
 14 1
 4 FPA
 14 8191
 5 FPA
 3 FPA+1
 0 FPB+1
 14 1
 4 FPB
 14 8191
 5 FPB
 3 FPB+1
 10 FPA+2
 10 FPB+2
 4 FPA+2
 2 FPB+2
 9 NEG5
 2 +0
 1 =15 0
 6 =14 8191
 5 ;+6
 4 FPB+2
 5 FPA+2
 0 FPA+1
 14 1
 4 FPA
 +0
 3 FPA+1
 1 FPB
 5 FPA
 4 FPA+1
 1 FPB+1
 9 ;+3
 5 FPA+1
EXIT31 8 FSTAND
 10 FPA
 6 =15 8191
 8 ;-4
NEG5 1 =15 0
 6 =14 8191
 5 ;+4
 0 FPB+1
 14 1
 4 FPB
 +0
 3 FPB
 1 FPA
 5 FPA
 4 FPB
 1 FPA+1
 9 ;+2
 8 EXIT31-1
 10 FPA
 6 =15 8191
 8 EXIT31-1



FNADD 4 +0 (NEGATE FPA THEN JUMP TO FADD)
5 ;+12 ( CLEAR CARRY BIT )
 4 FPA+1
 7 ;+14
 2 +131071
 1 +1
 9 ;+8
 5 FPA+1
 4 FPA
 2 &777777
 1 ;+3
 5 FPA
 8 FADD
 +0   ( CARRY BIT )
 6 +131071
 10 ;-2
 8 ;-9
 ( HERE FOLLOWS TREATMENT OF SPECIAL CASES FOR FNADD )
 4 FPA
 1 =/8 0
 7 ;+5
 1 =/8 0
 7 ;+9
 4 FPA+1
 8 FNADD+4
 4 =/0 0
 5 FPA
 4 +1
 2 FPA+2
 5 FPA+2
 8 FADD
 4 =8 0
 5 FPA
 10 FPA+2
 8 FADD



FEXC 0 ADDRESS (EXCHANGE FPA WITH STORE)
 11 LINK
 8 BTOFB
 0 ADDRESS
 11 LINK
 8 FATOB
 4 EXIT+2
 5 ;+10
 4 +0
 5 EXIT+2
 0 ;+6
 11 LINK
 8 BTOFA
 4 ;+4
 5 EXIT+2
 8 INTERP
 0 FPB (MODIFIER)
 +0  (SAVE FORMAT PARAMETER)

FREAD 0 ADDRESS (LOAD FPA)
 11 LINK
 8 BTOFA
 8 INTERP

FWRITE 0 ADDRESS (STORE FPA)
 11 LINK
 8 FATOB
 8 INTERP



FCHANGE 4 ADDRESS (CONVERSION ROUTINES)
 6 +8191
 2 +8191
 7 AD8191
 2 +8191
 2 CONST
 9 ERRF
 2 CONST
 5 ;+3
 0 ;+2
 /8 ;+2
 +0  (MARKER)

QF6JMP 8 ERRF (LIVE; ALTERED TO 8 PSTAND)
 8 EXIT+3 (PACKED FORMAT)
 8 EXIT+5 (UNPACKED FORMAT)
 8 ITOR (INTEGER TO REAL)
 8 RTOI (REAL TO INTEGER)
 8 FTOR (FRACTION TO REAL)
 8 RTOF (REAL TO FRACTION)
 8 ERRF (LIVE; 8 IOINT)
 8 ERRF (LIVE 8 IORL)
CONST +8  (GIVES MAX.ADDRESS EXCEPT 8191)
AD8191 8 ERRF (LIVE; 8 PSET)


ITOR 0 QF+3
 /4 0
 5 FPA
 4 +0
 5 FPA+1
 4 +17
 5 FPA+2
 8 FSTAND

RTOI 4 FPA+2
 9 ;+13
 2 +17
 9 ERRI
 7 ;+3
 2 =15 0
 5 ;+2
 4 FPA
 14 0 (SHIFT FORMED BY PROGRAM )
 0 QF+4 (ROUTINE ROUNDS DOWN)
 /5 0
 4 =14 0 (REPLACE FOR CASE WHEN EXP=+17)
 5 ;-4
 8 INTERP
 4 =14 8175 (FPA HAS ABSOLUTE VALUE LESS THAN 1/2)
 8 ;-9

FTOR 0 QF+5
 /4 0
 5 FPA
 4 +0
 5 FPA+1
 5 FPA+2
 8 FSTAND

RTOF 4 FPA+2
 9 ;+3
 7 ;+11
 8 ERRFR
 1 +17
 9 ;+10
 1 =14 8175
 5 ;+2
 4 FPA
 14 0 (SHIFT FORMED BY PROGRAM)
 0 QF+6
 /5 0 (ROUTINE ROUNDS DOWN)
 8 INTERP
 4 =14 0 (EXPONENT= +0)
 8 ;-7
 4 =14 8175 (FPA HAS ABSOLUTE VALUE LESS THAN.000076)
 8 ;-9


JZERO 4 FPA
 7 JUMP
 8 INTERP

JUMP 4 QF
 6 =15 8191
 2 ADDRESS
 7 ;+0
 4 ADDRESS
 5 QF
 8 INTERP+1

JNEG 4 FPA
 9 JUMP
 8 INTERP

COUNT 0 ADDRESS
 /10 0
 8 INTERP

SAVELK 0 ADDRESS
 4 QF
 /5 0
 /10 0
 8 INTERP



FMUL 0 ADDRESS (GET SECOND OPERAND)
 11 LINK
 8 BTOFB
 4 FPA+2 (MULTIPLY FPA BY FPB)
 1 FPB+2
 5 FPA+2
 11 LINK
 8 DLMULT
 8 FSTAND


FDIV 0 ADDRESS (GET DIVISOR)
 11 LINK
 8 BTOFB
 4 FPA (DIVIDE FPA BY FPB)
 7 FSTAND (QUOTIENT = +0)
 0 FPA+1
 14 1
 4 FPA
 14 8191 (TO AVOID OVWRFLOW OF MANTISSA)
 3 WS+14
 5 WS+13
 4 FPB
 7 ERRO (DIVISOR = +0)
 5 WS+17
 4 FPB+1
 5 WS+18
 11 DLDIV
 8 DLDIV+1
 4 WS+28
 5 FPA
 4 WS+29
 5 FPA+1
 4 FPB+2
 2 FPA+2
1 +1
 5 FPA+2
 8 FSTAND

FSHIFT 4 ADDRESS (MULTIPLY BY 2**N AND STANDARDISE FPA)
 14 5
 14 8187
 1 FPA+2
 5 FPA+2
 8 FSTAND



DLMULT 4 FPB (MULTIPLY MANTISSAS OF FPA AND FPB)
 12 FPA
 5 WS+10
 3 WS+11
 4 FPB+1
 12 FPA
 14 8175
 3 WS+12
 1 WS+10
 5 FPA
 4 WS+11
 1 WS+12
 9 ;+19
 5 WS+11
 4 FPB
 12 FPA+1
 14 8175
 3 WS+12
 1 FPA
 5 FPA
 4 WS+12
 1 WS+11
 9 ;+6
 5 FPA+1
 7 ;+10
 4 FPA
 0 LINK
 /8 1
 6 =15 8191
 10 FPA
 8 ;-7
 6 +131071
 10 FPA
 8 ;-20
 4 FPA (CORRECTION FOR -1.0 TIMES -1.0 )
 2 =/0 0
 7 ;+2
 8 ;-12
 4 +131071
 5 FPA
 5 FPA+1
 8 ;-15

DLDIV +0
4 WS+14
0 +0
14 8191
3 WS+16
5 WS+15
4 +0
5 WS+30
5 WS+29
0 +0
4 WS+13
13 WS+17
5 WS+32
12 WS+17
3 WS+20
5 WS+19
4 WS+20
7 NOCARRY
2 +131071
1 +1
5 WS+20
4 WS+19
2 WS+13
1 -1
8 ;+3
NOCARRY 4 WS+19
2 WS+13
5 WS+19
4 WS+32
12 WS+18
14 8191
3 WS+33
2 WS+15
5 WS+21
4 WS+33
2 WS+16
5 WS+22
9 SUBT1
4 WS+21
8 ;+4
SUBT1 4 WS+21
1 -1
5 WS+21
7 L0
9 LNEG
LPOS 14 1
10 WS+30
9 JUMP1
8 ;-3
L0 4 +16
5 WS+30
8 JUMP1
LNEG 0 +0
14 1
10 WS+30
9 ;-2
JUMP1 4 WS+19
7 JUMP2
1 +1
7 JUMP2
1 -1
14 8191
10 WS+29
8 ;-6
JUMP2 4 WS+29
1 WS+30
2 +1
7 N1 (N=1&M=0)
4 WS+29
2 +16
5 WS+28
1 =14 0
5 SHIFT2
4 WS+29
2 +0
6 &17777
1 =14 0
5 SHIFT1
EVALUATE 0 WS+22
14 1
4 WS+21
SHIFT1 14 0 (SET BY PROGRAM)
3 WS+22
5 WS+21
0 WS+20
14 1
4 WS+19
SHIFT2 14 0 (SET BY PROGRAM)
3 WS+23
1 WS+21
5 WS+24
4 WS+23
1 WS+22
5 WS+25
9 ADD1
8 ;+2
ADD1 10 WS+24
0 WS+25
14 1
4 WS+24
14 8191
13 WS+17
5 WS+26
4 WS+28 (K>1)
2 =15 1
(=14 8193)
5 SHIFT3
0 +0
4 WS+26
SHIFT3 14 0 (SET BY PROGRAM)
3 WS+29
1 WS+32
5 WS+28
0 DLDIV
/8 1

N1 4 =14 8191
5 SHIFT1
4 =14 15
5 SHIFT2
4 +15
5 WS+28
8 EVALUATE

(QFINOUT)


(THIS PART IS COMMON TO THE INPUT AND OUTPUT ROUTINES)


IORTRN

 ^DECODE+15 (ALTER JUMP TO ALLOW 15 INSTRUCTIONS)
 8 QFIO

 ^QF6JMP (ALTER JUMPS TO ALLOW OTHER 6 INSTRUCTIONS)
 8 PSTAND
>+6
 8 IOINT
 8 IORL
>+1
 8 PSET

 ^IORTRN


NUMTYP -1 (=0 IF INTEGER ; <0 IF REAL )
PARAM +0 (OUTPUT FORMAT PARAMETER)
PARAM2 +0 (WS FOR PROCESSING ABOVE)
IOMOD +0 (USED TO ACCESS LOOK-UP-TABLES)


QFIO 4 ADDRESS (SEE WHETHER INPUT OR OUTPUT)
 6 +8191
 5 ADDRESS
 4 +0
 5 IOMOD

 0 IOMOD
 /4 DEVNO
 9 ERRF
 2 ADDRESS
 /7 DCODDV
 10 IOMOD
 8 ;-6

DEVNO +2048
 +2052
 +6144
 +6148
 -1

DCODDV 8 QFIN
 8 QFIN
 8 QFOUT
 8 QFOUT


QFIN 4 ADDRESS
 5 IDEV
 4 NUMTYP
 9 ;+6
 11 IOLNK
 8 RDINT
 0 QF+4
 /5 0
 8 INTERP

 11 IOLNK
 8 RDRL
 4 FPMS
 5 FPA
 4 FPMS+1
 5 FPA+1
 4 FPMS+2
 5 FPA+2
 8 INTERP


QFOUT 4 ADDRESS
 5 ODEV
 4 NUMTYP
 9 ;+6
 0 QF+3
 /4 0
 11 IOLNK
 8 OUTI
 8 INTERP

 4 FPA
 5 FPMS
 4 FPA+1
 5 FPMS+1
 4 FPA+2
 5 FPMS+2
 11 IOLNK
 8 OUTR
 8 INTERP


PSTAND 4 +0 (RESET PRESUMED SETTINGS)
 5 OPMD1
 4 +1
 5 DIGM1
 4 +8
 5 DIGN1
 4 +6
 5 INTDG
 4 +1
 5 PREF
 4 +0
 5 LDZERO
 8 INTERP

PSET 10 QF
 0 QF
 /4 0
 5 PARAM
 14 8175 (SET NEW- OR SAME-LINE)
 6 +1
 5 PREF

 4 +0
 5 IOMOD (SET FORMAT REQUIRED)
 4 PARAM
 6 =15 0
 5 PARAM2
 0 IOMOD
 /4 FRMLUT
 9 ERRF
 2 PARAM2
 /7 DCODFRM
 10 IOMOD
 8 ;-6

FRMLUT 0 0
 1 0
 2 0
 4 0
 -1

DCODFRM 8 PFREE
 8 PALIGN
 8 PSCALE
 8 PINT

PFREE 4 +0 (FREEPOINT FORMAT)
 8 PRL
PALIGN 4 -1 (ALIGNED FORMAT)
 8 PRL
PSCALE 4 +1 (SCALED FORMAT)

PRL 5 OPMD1
 4 PARAM
 14 8188
 6 +15
 5 DIGM1
 4 PARAM
 6 +15
 5 DIGN1
 8 INTERP

PINT 4 PARAM
 6 +15
 5 INTDG
 8 INTERP

IORL 4 -1
 5 NUMTYP
 8 INTERP

IOINT 4 +0
 5 NUMTYP
 8 INTERP


( REST OF PROGRAM IS BASED ON ALGOL ROUTINES)






IOLNK     +0
OPMD1     +0
DIGM1     +1
DIGN1     +8
INTDG     +6
PREF      +1
LDZERO    +0
IDEV      +2048
ODEV      +6144

N
FPMS
W3        +0
W4        +0
W5        +0

W1
TENPWR    +0
W2
NSIGNF    +0
W6        +0
W7
BEFPT     +0
W8
AFTPT     +0
W9
DECPWR    +0
W10
SIGNCH    +0
ADPART    +0

SBLNK1    +0
SBLNK2    +0

SBW       +0
SBW1      +0
SBW2      +0

SBW4      +0
SBW5      +0


SW        +0
SW1       +0


NEXTCH    +0
DIGM      +1
DIGN      +8

OPMD      +0

FLNS16    +1
FLNS6     +2

FLNS1     +3    ( INTEGER OVERFLOW )
FLNS17    +4    ( ILLEGAL CHAR ON INPUT )
                (   OF NUMBER     )


FLNS14    +6
FLNS18    +7
FLNS15    +5    ( ILLEGAL CODE ON INPUT)
INOEX     0   IOLNK
          /8   1


RNDTBL
+65536
+26214
+10485
+4194
+1677
+671
+268
+107
+43
+17
+7
+3
+1
+0
+0
+0



BUFLAG    -1
CHADD     +0
CHPSN     +0
HALTMK    +0
LFCH +10
ECH /0 197 (E)
ALRMCH /0 72 (H)
VOID +36 ($)


PARITY +0
PTYCH +0 (S/R;FIND PARITY OF CHARACTER)
 5 SBW5
 4 +0
 5 PARITY
 4 SBW5
 2 +0
 6 SBW5
 7 ;+5
 10 PARITY
 2 SBW5
 5 SBW5
 8 ;-6
 4 PARITY
 6 +1
 0 PTYCH
 /8 1



OTCHA     +0
OTCHA1    5     SBW
OTCHA2    4     SBW
          9     OTCHA3 (JUMP IF EXTERNAL CODE GIVEN)
          1     -32
          9     ;+3
          4     VOID
          8     OTCHA3

 1 +31
 7 OTCHA4 (NEWLINE)
 1 +33
 5 SBW
 11 PTYCH
 8 PTYCH+1
 0 +0
 14 7
 1 SBW
OTCHA3    0     ODEV
          /15   0
          0     OTCHA
          /8    1
OTCHA4    0     ODEV
 4 +141
          /15   0
          4     LFCH
          /15   0
          4     +0
          8     OTCHA3

( THIS PART IS USED BY THE INPUT ROUTINES)

GECH 4 +0
 5 HALTMK
GECH4 4 +0
 0 IDEV
 /15 0
 5 SBW4
 11 PTYCH
 8 PTYCH+1
 7 ;+3
 4 FLNS14 (PARITY ERROR)
 8 IOFAIL

 4 SBW4 (EVEN PARITY CHARACTER)
 6 +127
 5 SBW4
 2 +63
 9 CDCV3
 2 +20
 9 CDCV3

CDCV5 4 SBW4 (FORM SIR INTERNAL CODE)
 1 -32

CDCV4 5 NEXTCH (SET GROUP CODE IF A DIGIT)
 2 +25
 9 NOTDIG
 2 +9
 9 NOTDIG
 4 =8 0

GECHEX 0 SBLNK
 /8 1

NOTDIG 4 +0
 8 GECHEX

CDCV3 4 SBW4 (SPECIAL ACTION)
 7 GECH4 (FIRST TEST IF IGNORABLE)
 1 -13
 7 GECH4
 1 -114
 7 GECH4
 1 +117 (NOW TEST IF MEANINGFUL)
 7 CDCV6 (LINEFEED)
 7 CDCV6
 1 -10
 7 WAIT (HALT)
 1 -19
 7 STRING (GRAVE)
 4 +0 (READ AS SPACE)
 8 CDCV4

WAIT 4 ;+3 (THIS ROUTINE MUST BE CHANGED FOR EXTRA STORE)
 5 9
 8 ;+0
 8 GECH4

STRING 4 FLNS15 (ATTEMPT TO INPUT STRING)
 8 IOFAIL

CDCV6 10 HALTMK
 4 +1
 8 CDCV4




SBLNK
STAND     +0

          4     +0
          5     SBW
          4     W3
          7     STAND3
          9     STAND4
STAND1    14    1
          9     STAND2
          10    SBW
          8     STAND1

STAND7    4     +0
          5     W3
          5     W4
STAND5    5     W5
          8     STAND6

STAND3    4     +17
          5     SBW
          4     W4
          7     STAND5
          8     STAND1


STAND4    1     +1
          7     ;+3       (IF FULL HOUSE IN MS PART)
          4     W3
          8     ;+5
          4     +16       (ADJUST EXP AND TAKE LS )
          5     SBW
          4     W4
          10    SBW
          14    1
          9     ;-2       (SHIFT TILL +VE )
STAND2    4     SBW
SHIFTD    5     SBW       (ENTRY FOR DOUBLE )
          7     STAND6    (  LENGTH SHIFT   )

          2     W5        (   DOUBLE LENGTH SHIFT  )
          5     W5
          1     +64
          9     STAND7
          4     SBW
          6     +8191
          1     SHFTI
          5     SHFTN
          0     W4
          14    1
          4     W3
SHFTN     +0
          3     W4
          5     W3
STAND6    0     SBLNK
          /8    1
SHFTI     14    0








(903 ALG INT INPUT AND OUTPUT PT2 )

DIVTEN    0     W4        ( SUBRT DIVIDE FRACTION )
          14 1            (  BY 10  OR  100*2^-3  )
          4     W3
          14    8188      (FORM F*2^-4 )
          13 TENPWR	  (DIVIDE BY 10*2^-4 OR 100*2^-7)

          14    18
          5     SBW
          14    3         ( QA*2^3  OR QA*2^6  )
          12    TENPWR
          14    1         ( QA*10 OR QA*100*2^3 )
          3     SBW2
          5     SBW1
          4     SBW2      ( FORM 10*DQ =F-QA*10 )
          2     W4
          9     ;+2       ( SUBTRACT LEAST SIGNIFICANT )
          8     ;+3
          10    SBW1      ( CARRY DIGIT  )
          6     =15 8191
          5     SBW2
          4     SBW1
          2     W3        ( SUBTRACT MOST SIG )
          5 SBW1
          0     SBW2
          14    1
          4     SBW1      ( DQ*2^11 )
          14    11
          13    TENPWR    (    )
          0     +0
          14    8177      (FORM DQ )
          3     W4        (  TRUE QUOTIENT =QA+DQ )
          1     SBW
          5     W3
          0     SBLNK     (  EXIT  )
          /8    1


DECML5    4     +4
          1     W5
          5     W5        (EXPONENT +4 )

DECML     0     W4
          14    1         ( SCALE  F*2^-4 )
          4     W3
          14    8188
          3     W4
          5     W3

DECML1    0     W4
          14    1
          4     W3
          14    1         ( F*2 )
          3     W4
          5     W3
          14    2         ( F*8 )
          3     SBW

DECML4    1     W3        ( ADDN ENTRY ALSO 10F=F*8+F*2 )
          5     W3
          4     SBW
          1     W4        (ADD L S )
          9     DECML2
DECML3    5     W4
          0     SBLNK     ( EXIT )
          /8    1

DECML2    6 =15 8191      ( CARRY BIT  )
          10    W3
          8     DECML3



( LIBRARY FP INPUT - OUTPUT :OUTPUT )



OUTR      4  DIGN1
          5  DIGN
          4  DIGM1
          5  DIGM
          4  OPMD1
          5  OPMD
          4  +4
          8  OINT2


OUTI      5  W3
          4  INTDG
          5   DIGM
          4  +0
OINT2     5  ADPART
          4  LDZERO
          5  NSIGNF
          4  +0
          5  SIGNCH
          4  PREF
          11  OTCHA
          8  OTCHA1      (OUTPUT NEWLINE OR SPACE)
          4  ADPART
          7  OUTI3
OINT3

          4  +0
          5  DECPWR
          4     W3
          9     OPRL1
          14    1
          9     OPRL3
          7     OPRL19    (TEST ZERO )
OPRL2     4     FLNS6     (NON STANDARD FP NUMBER )

IOFAIL    5  W3 (FORM ERROR MESSAGE )
 1 +48
 11 PTYCH (OUTPUT *EE<N>)
 8 PTYCH+1
 0 +0
 14 7
 1 +48
 1 W3
 14 8
 1 +197
 5 IOERR+1

 0 ;+2
 8 ERROR
 0 IOERR


IOERR +50602 (E*)
 +131071 (<N>E)
 8 ;+1
 0 W3
 /8 ERRANS-1

ERRANS 8 IOFAIL (RECOVERY ROUTINES)
 8 ERR2 (O/P;NON-STANDARDISED)
 8 ERR3 (I/P;INTEGER OVERFLOW)
 8  QFIO (I/P;CONTEXTUAL ERROR)
 8 GECH (I/P;ILLEGAL CHARACTER)
 8 GECH (I/P;ODDPARITY)
 8 ERR7 (I/P;REAL OVERFLOW)

ERR2 4 +0 (OUTPUT +0)
 5 FPMS
 5 FPMS+1
 5 FPMS+2
 8 OUTR

ERR3 4 W2 (INPUT LARGEST INTEGER OF CORRECT SIGN)
 14 17
 0 QF+4
 8 ERRI+8

ERR7 4 +131071
 5 FPMS
 4 &377600
 5 FPMS+1
 4 +63
 5 FPMS+2
 8 RDNM20






OPRL1     14    1
          9     OPRL2     (NON STANDARD )
          11    SBLNK
          8     NEGR1     ( NEGATE )
          4     +13
          5     SIGNCH    (SET TO PRINT MINUS )
OPRL3
OPRL4     4     W5
          9     OPRL12    ( JUMP IF EXP NEG )
          4     &310000   ( SET DIVISOR 100*2^-7 )
          5     TENPWR
OPRL5     4     W5
          9     OPRL10
          7     OPRL11    (JUMP IF POWER CORRECT )
          4     +5
          2     W5
          9     OPRL8     (IF EXP < 5 JUMP )
          1     +2
          5     W5        ( ADJUST SCALE )
          10    DECPWR
OPRL9     11    SBLNK
          8     DIVTEN    ( DIVIDE BY 10 OR 100*2^-3 )
          10    DECPWR

          11    STAND
          8     STAND+1
          8     OPRL5

OPRL8     4     =10 0
          5     TENPWR    ( SET DIVISOR 10*2^-4 )
          8     OPRL9

OPRL18    4     -1        ( IF RESULT >OR= 1.0 )
          11    SBLNK     (HALVE AND ADJUST EXPONENT )
          8     SHIFTD
          6     =15 8191
          5     W3
          4     -1
          5     ADPART    ( AVOID ADDING RNDFC NEXT TIME)
          8     OPRL8     (GO BACK TO DIVIDE BY TEN )


OPRL19    4  W4
          10 DECPWR
          7     OPRL20
          8     OPRL2     ( GO TO FAIL NON STANDARD )


OPRL13    4     &314631   ( IF EXP=-3 )
          2     W3
          9     OPRL14    ( TEST MS )
          7     ;+2
          8     OPRL10    ( IF > .800001 OK )
          4     &231463
          2     W4
          9     OPRL14    ( TEST EXACT )
          8     OPRL10

OPRL14    4     W5        ( EXP:=EXP+4 )
          1     +4
          5     W5
          11    SBLNK     ( MULT BY 10*2^-4 )
          8     DECML
          11    STAND
          8     STAND+1
OPRL15    4     +1
          2     DECPWR
          5     DECPWR
OPRL12    4     W5
          1     +3
          9     OPRL14    ( EXP>-3 )
          7     OPRL13    ( EXP=-3 )
OPRL10    4     W5
          11    SBLNK     ( *2^EXP )
          8     SHIFTD
OPRL11     4  ADPART      (CHANGED TO CORRECT ROUNDING ERROR 21.2.72)
           9  OPRL20      (AVOID ADDING ROUNDING*2)
           4  OPMD
           7  ;+4
           9 ;+6
           4  DIGN
           8  ;+6
           4  DECPWR
           9  ;+3
           8  ;-4
           4  DECPWR
           1  DIGN
           9  OPRL20
           5  SBW1    	  (TOTAL SIGNIF DIGITS)
           1  SBW1
           2  +0
           5  SBW
           0  SBW1
           /4  RNDTBL

          0  SBW
          /14  0
          3  SBW
          11  SBLNK
          8   DECML4	  ( ADD IN ROUNDING )
          4  W3
          9  OPRL18

OPRL20    4     OPMD      (WHAT FORMAT )
          7     OPRL21    (FREEPOINT )
          9     OPRL22    ( ALIGNED )
          4     +1        ( SCALED )
          2     DIGN
OPRL25    5     AFTPT
          4     +1
          5     BEFPT

          11    SBLNK1
          8     OTMX1
          4     +16
          5     NSIGNF
          4     +11
          5     SIGNCH

          4  +31
          11 OTCHA
          8  OTCHA1	  ( PRINT ? )

          4  DECPWR
          1  -1
          5  W3
          4  +2
          5  DIGM
          4  +0
          5  ADPART
OUTI3     5  W4
          5  DIGN

          4  -1
          5  OPMD
          4  +17
          5  W5
          11  STAND
          8   STAND+1
          8 OINT3

OPRL27    4     +0
          8     OPRL28

OPRL21    4     DECPWR
          9     OPRL27
OPRL28    5     BEFPT
          2     DIGN
          9     OPRL24
OPRL23    5     AFTPT

          11    SBLNK1
          8     OUTMXD

          8  INOEX



OPRL22    4  DECPWR
          2  DIGM
          9  OPRL29
          4  DIGM
          5  BEFPT
          4  DIGN
          8  OPRL23

OPRL24    4  DIGN
          8  ;+3

OPRL29    4  DIGN
          1  DIGM
          1  -5
          9  ;+3(NO ROOM FOR NORMAL ALARM PRINT )
          1  +1
          8  ;+2
          4  +1
          4  DIGN
          4 +1
          5  OPMD
          5  ADPART
          8  OPRL11



OUTMXD    4     DECPWR    (SUBRT OUTPUT MIXED NUMBER)
OTMX1     5     SW1
OTMX2     4     BEFPT
          7     OTMX4     ( NO MORE DIGITS BEFORE POINT)
          1     AFTPT
          7     OTMX13    ( ALL DIGITS PRINTED )
OTMX3     4     SW1
          2     BEFPT
          9     OTMX7
          7     OTMX6
          4     BEFPT
          1     -1
          7     OTMX11
          4     NSIGNF
          5     SW        ( SET CHARACTER )
          7     OTMX10    ( IF SPACE OUTPUT )
          8     OTMX9     (OTHERWISECHECK IF SIGN PRINTED)

OTMX11    4     +16
          5     SW
          8     OTMX9

OTMX4     4     AFTPT
          7     OTMX12
          4     +16
          5     NSIGNF
          4     SIGNCH
          9     OTMX5     ( IF SIGN NOT OUTPUT )
          11    OTCHA
          8     OTCHA1    ( OUTPUT SIGN )
          4     -1
          5     SIGNCH
OTMX5     4     +14
          11    OTCHA     ( OUTPUT POINT )
          8     OTCHA1
          8     OTMX3

OTMX6     11    SBLNK
          8     DECML     ( F*2^-4*10 )
          8     OTMX8

OTMX7     11    SBLNK
          8     DECML1    ( F*10 )
OTMX8     4     W3
          14    8179
          1     +16
          5     SW        ( SET CHAR = DIGIT PART )
          4     W3
          6     +8191     ( LEAVE FRACTIONAL )
          5     W3        ( PART IN STORE )
OTMX9     4     SIGNCH
          9     OTMX10
          11    OTCHA
          8     OTCHA1
          4     -1
          5     SIGNCH
OTMX10    4     SW
          11    OTCHA
          8     OTCHA1    ( OUTPUT CHAR )
          4     BEFPT
          1     -1        ( REDUCE NO OF CHARS  )
          5     BEFPT
          8     OTMX2

OTMX12    4     ADPART
          7     OTMX13
          4     +0
          11    OTCHA     ( IF REAL NO .  PRINT  )
          8     OTCHA1    ( SPACE INSTEAD OF POINT )
OTMX13    0     SBLNK1    (EXIT)
          /8    1


( LIBRARY NUMBER INPUT )

RDINT     4     +1
          8     ;+2
RDRL      4     -1
          5     ADPART
RDNM      4     +0
          5     W1        ( DIGIT TOTAL :=0)
          5     W2        (SIGN FLAG )
          5     W3        ( NUMBER:=0 )
          5     W4
          5     W5
          5     W6        (REAL NUMBER FLAG)
          5     W7        ( EXP FLAG )
          5     W9        ( DECIMAL EXP :=0 )
          4     =/0 0
          5     W8        ( SET NO DIGITS AFTER PT )

RDNM1     11    SBLNK
          8     GECH
          6     =8 0
          7     RDNM3     (JUMP IF NOT DIGIT )
          10    W1        (TOTAL DIGITS )
          4     W7
          7     RDNM2     (JMP IF EXP NOT SET)
          0     +0
          4     W9
          1     W9        (DECIMAL EXP*10 )
          5     W9
          14    2
          1     W9
          1     NEXTCH
          1     -16       (ADD IN DIGIT )
          5     W9


          5  W9
          2  +128
          9  ;+2
          8  RDNM1

          1  W9
          8  ;-5( IF>28 MAKE=28 )



RDNM2     10    W8
          11    SBLNK     (NUMBER*10*2^-4)
          8     DECML5
          4     W5
          2     +17
          6     +8191     ( SCALING )
          1     SHFTI
          5     ;+4
          4     NEXTCH
          1     -16       ( SCALE DIGIT )
          0     +0
          +0
          3     SBW
          11    SBLNK     ( ADD TO NUMBER )
          8     DECML4
          11    STAND
          8     STAND+1
          8     RDNM1


RDNM5     4     W6        (IS REAL SET )
          10    W6
          7     RDNM6
RDNM7     4     FLNS17    ( ILLEGAL CHAR )
          8     IOFAIL



RDNM6     5     W8        (START COUNT FOR DIGITS  )
          8     RDNM1     (   AFTER POINT  )

RDNM8     4     +1        (SET SIGN )
RDNM9     5     W2        (IF + CLEAR SIGN )
          8     RDNM1

RDNM10    4     W7
          7     RDNM11    (IF EXP SET FAIL )
          8     RDNM7
RDNM11    10    W7        ( SET EXP )
          4     W1
          7     RDNM12    (JUMP IF NO DIGITS YET )
RDNM13    4     W2        ( STORE SIGN )
          5     W10
          4     +0
          5     W2        ( CLEAR SIGN )
          10    W6        (SET REAL )
          8     RDNM1


RDNM12    4     =8 0
          5     W3        (SET +1 IN NUMBER)
          4     +1
          5     W5
          10    W1        ( COUNT ONE DIGIT )
          8     RDNM13

RDNM3     4     NEXTCH
          1     -14
          7     RDNM5     ( POINT )
          1     -17
          7     RDNM10    ( ? )
          1     +18
          7     RDNM8     ( - )
          1     +2
          7     RDNM9     ( + )
          2     +21
          7     RDNM7     ( < )
          4     W1        ( TERMINATOR )
          7     RDNM1     (IF NO DIGITS YET IGNORE )
          4     W7
          7     RDNM14    (EXP NOT SET )
          4     W2
          7     RDNM4     (SIGN OF EXP )
          4     W9
          2     +0
          5     W9
RDNM4     4     W10       (RESTORE SIGN )
          5     W2
RDNM14    4     W8
          9     RDNM15    (JUMP IF NO DIGITS AFTER PT )

2         W9
5         W9    ( SUBTRACT NUMBER FROM DEC EXP )

RDNM15 4 W3
 7 RDNM20
 4 W9
 1 -100
 9 RDNM27

 4 FLNS18 (REAL OVERFLOW)
 8 IOFAIL

RDNM27 4 W9
          7     RDNM20    (DEC EXP ZERO )
          9     RDNM16    (       <0   )
          1     -1        ( IF >0 REDUCE )
          5     W9
          11    SBLNK
          8     DECML5    (  MULTIPLY BY TEN )
RDNM19    11    STAND
          8     STAND+1
          8     RDNM15


RDNM16    10    W9
          4     =10 0
          5     TENPWR    ( SET DIVISOR =+10 )
          11    SBLNK
          8     DIVTEN    ( DIVIDE )
          8     RDNM19


RDNM20    4     W2
          7     ;+3
          11    SBLNK     ( IF SIGN SET NEGATE )
          8     NEGR1
          4     ADPART
          9     INOEX     ( IF REAL REQUIRED EXIT )
          4     W5        (IF INTEGER REQUIRED CONVERT )
          1     -17
          9     RDNM21
          7     RDNM22
RDNM23    4     FLNS1     ( INTEGER OVERFLOW )
          8     IOFAIL


RDNM21    11    SBLNK
          8     SHIFTD
RDNM22    4     =8 0
          2     W4
          9     RDNM24
          4     W3
          9     RDNM25
          1     +1
          9     RDNM23    (NUMBER > 2^17 - 0.5 )
          8     ;+2
RDNM25    1     +1
          5     W3
RDNM24    4     W3
          8     INOEX


NEGR1     4     W4
          7     NEGR4     (TEST FOR  -1.0 & +0.5 )
          2     +0
          6     =15 8191
          5     W4
          10    W3
          4     W3
          2     +0
NEGR2     5     W3
          0     SBLNK
          /8    1

NEGR4     4     W3
          2     =/0 0
          7     NEGR3
          4     W3
          2     +0
          5     W3
          8     STAND+1

NEGR3     10    W5
          4     =8 0
          8     NEGR2

(QFMATH - mathematical functions)


SERIES   +0
 4 +0
 11 LINK         (SET RETURN FROM DLMULT)
 5 FPA+1
 0 SERIES
 /1 1
 5 FPA           (INCREMENT FPA)
 /4 2
 10 SERIES
 1 FPA+1
 10 SERIES
 9 OVERFLOW
RETURN 5 FPA+1   (INCREMENT FPA+1)
 /4 4
 /9 5            (RETURN IF LAST COEFFICIANT , FPA,FPA+1 = SUM)
 8 DLMULT
OVERFLOW 6 =15 8191
 10 FPA
 8 RETURN

SQRT
QFSQRT +0
 +0 (EXIT FROM QF)
 4 FPA
 9 ERRSQRT
 7 RETSQRT
 4 FPA+2
 6 +1
 7 EVEN
 0 FPA+1 (HALVE MANTISSA)
 14 1
 4 FPA
 14 8191
 3 FPA+1
 5 FPA
EVEN 4 FPA (X0=X/2+.5)
 14 8191
 1 =8 0
 5 WS+17
 4 FPA (X1=[X/X0+X0]/2)
 13 WS+17
 6 =/15 8190 (ENSURE BIT 1=0)
 1 WS+17
 14 8191
 6 +131071
 5 WS+17
4 FPA (X2=[X/X1+X1]/2)
13 WS+17
 6 =/15 8190
1 WS+17
14 8191
6 +131071
5 WS+17
 4 FPA (X3=[X/X2+X2]/2)
 13 WS+17
 6 =/15 8190
 1 WS+17
 14 8191
 6 +131071
 5 WS+17
 4 +0
 5 WS+18
 0 FPA+1 (NEXT STEP IS DOUBLE LENGTH)
 14 1
 4 FPA
 14 8191
 3 WS+14 (WS13AND14/WS17AND18)
 5 WS+13
 11 DLDIV
 8 DLDIV+1
 0 WS+18
 14 1
 4 WS+17
 14 8191
 3 WS+18
 5 WS+17
 4 WS+18
 1 WS+29
 9 CARRYSQRT
BFC 5 FPA+1
 4 WS+17
 1 WS+28
 5 FPA
 10 FPA+2 (ADD 1 TO EXPONENT AND HALVE IT)
 4 FPA+2 (THIS WORKS IN ALL CASES)
 14 8191 (POS,NEG,ZERO,ODD AND EVEN)
 5 FPA+2
RETSQRT 4 SQRT
 5 QF
 8 INTERP (RETURN TO FLOATING POINT MODE)
CARRYSQRT 10 WS+17
 6 +131071
 8 BFC
ERRSQRT        0 ;+2
 8 QF+7
 0 ;+1
 +21408
 +8657
 8 ;+1
 4 FPA+1 (RESUME TO EVALUATE SQRT.MODX)
 7 FPA1ZR
 2 +0
 6 +131071
 5 FPA+1
 10 FPA
 4 FPA
 2 +0
 5 FPA
 8 SQRT+5
FPA1ZR 4 FPA
 1 =/0 0
 7 ;+2 (SPECIAL CASE WHEN MANTISSA=-1)
 8 ;-7
 4 =8 0
 5 FPA
 10 FPA+2
 8 SQRT+5

COS
QFCOS   +0
   +0           (EXIT QF)
 4 COS
 5 QF           (SET RETURN)
 4 +0
 8 SINCOS
SIN
QFSIN   +0
   +0           (EXIT QF)
 4 SIN
 5 QF           (SET RETURN)
 4 =/8 0
SINCOS 5 SIN    (STORE 0.0 FOR COS AND -0.5 FOR SIN)
 4 &006671
 5 FPB+1
 4 &242763
 5 FPB
 11 LINK
 8 DLMULT+1     (FPA,FPA+1 = 2*B/PY)
 4 FPA+2
 1 +35
 9 ;+3
 1 -73
 9 ;+2
 4 +0
 1 =15 37
 6 =14 8191
 5 ;+4
 0 FPA+1
 14 1
 4 FPA
   +0           (SHIFT B LEFT P-1 PLACES)
 1 SIN          (ADD INCREMENT)
 3 FPA+1
 3 FPB+1
 5 FPA
 5 FPB
 11 LINK
 8 DLMULT+1
 5 FPB
 4 FPA+1
 5 FPB+1        (FPB,FPB+1 = X^2)
 11 SERIES
 8 SERIES+1     (SUM SERIES)
   -1
   +130994
   +0
   +5724
   -3
   +87061
   +85
   +26055
   -1934
   +43641
   +23510
   +74970
   -114342
   +37873
   +92681
   +117968
   +0
   -1
 4 FPA+1
 5 FPB+1
 4 FPA
 5 FPB
 11 LINK
 8 DLMULT+1      (FPA,FPA+1 = COS[PY*X/2]^2/2)
 0 FPA+1
 14 1
 4 FPA
 14 1
 1 =/8 0
 3 FPA+1
 5 FPA           (FPA,FPA+1 = COS[PY*X/2]^2-0.5)
 4 +1
 5 FPA+2         (FPA+2 = 1)
 8 FSTAND

ARCTAN
QFATAN   +0
   +0            (EXIT QF)
 4 FPA+2
 2 +0
 9 AT1           (TO AT1 IF P>0)
 4 FPA
 5 WS+28
 4 FPA+1
 5 WS+29         (WS+28,WS+29 = FPA,FPA+1)
 4 ATORD1
 5 ATST1
 8 AT2
AT1 1 +1
 5 FPA+2         (FPA+2 = 1-P)
 4 FPA
 5 WS+17
 4 FPA+1
 5 WS+18         (WS+17,WS+18 = B)
 4 +65535
 5 WS+13
 4 +131071
 5 WS+14         (WS+13,WS+14 = 0.5-2^-34)
 11 DLDIV
 8 DLDIV+2       (WS+28,WS+29 = 1/[2*B])
 4 ATORD4
 5 ATST1
 4 FPA
 9 AT4
 4 ATORD3
 8 ;+2
AT4 4 ATORD2
 5 ATST2
AT2 4 FPA+2      (NOW -1<P)
 1 +36
 9 ATBIG
AT3 1 =14 8156
 6 =14 8191
 5 ;+4           (SET SHIFT)
 0 WS+29
 14 1
 4 WS+28
   +0            (SHIFT TO DESTANDARDISE Z SO THAT P = 0)
 3 FPA+1
 3 FPB+1
 3 WS+29
 5 FPA
 5 FPB
 5 WS+28
 11 LINK
 8 DLMULT+1      (FPA,FPA+1 = Z^2)
 5 FPB
 4 FPA+1
 5 FPB+1         (FPB,FPB+1 = Z^2)
 11 SERIES
 8 SERIES+1      (SUM SERIES)
   +23
   +92819
   -186
   +36020
   +683
   +41427
   -1600
   +111633
   +2752
   +58163
   -3873
   +55530
   +4877
   +77093
   -5920
   +44706
   +7275
   +99259
   -9362
   +41427
   +13107
   +21722
   -21846
   +87501
   +65535
   +131071
   +0
   -1
 4 WS+28
 5 FPB
 4 WS+29
 5 FPB+1
 11 LINK
 8 DLMULT
 4 +1
 5 FPA+2          (FPA = ARCTAN[Z])
ATST1     +0      (P>0 STORE FORMAT PARAMETER ELSE TO AOUT)
 5 ATK
 4 +0
 5 EXIT+2
 11 QF
 8 FSTAND         (ENTER QF UNPACKED)
ATST2   +0        (A>=1 NEGADD PY/4, A<=-1 NEGADD -PY/4)
   +0             (EXIT QF , FPA = ARCTAN[A])
 4 ATK
 5 EXIT+2
ATOUT 4 ARCTAN
 5 QF             (SET RETURN)
 8 FSTAND
ATORD1 8 ATOUT
ATMPB4 &466740
 &112567
   +1
ATPPB4 &311037
   &265211
   +1
ATORD2 2 ATMPB4
ATORD3 2 ATPPB4
ATORD4 4 EXIT+2
ATBIG 4 +0
 8 AT3
ATK +0

LN
QFLOG  +0
  +0             (EXIT QF)
 4 FPA
 7 LOERR         (ERROR A=0)
 9 LOERR         (ERROR A<0)
 0 FPA+1
 14 1
 4 FPA
 14 8191
 1 =8 0
 5 WS+17
 3 WS+18         (WS+17,WS+18 = [B+1]/2)
 1 =/0 0
 5 WS+13
 3 WS+14         (WS+13,WS+14 = [B-1]/2)
 11 DLDIV
 8 DLDIV+1       (WS+28,WS+29 = -T)
 5 FPA
 5 FPB
 4 WS+29
 5 FPA+1
 5 FPB+1
 11 LINK
 8 DLMULT        (FPA,FPA+1 = T^2)
 5 FPB
 4 FPA+1
 5 FPB+1         (FPB,FPB+1 = T^2)
 11 SERIES
 8 SERIES+1      (SUM SERIES)
   +18142
   +75061
   +20153
   +80261
   +23831
   +48226
   +29127
   +14509
   +37449
   +18724
   +52428
   +104857
   +87381
   +43690
   +0
   -1
 11 LINK
 8 DLMULT
 0 WS+29
 14 1
 4 WS+28
 3 FPB+1
 5 FPB           (FPB,FPB+1 = -T)
 14 1
 5 WS+28
 3 WS+29         (WS+28,WS+29 = -2*T)
 11 LINK
 8 DLMULT
 1 WS+28
 5 FPA
 4 FPA+1
 1 WS+29
 9 LOV
LO 5 FPA+1       (FPA,FPA+1 = LOG[B])
 4 FPA+2
 5 LOK
 4 +0
 5 FPA+2         (STORE FPA+2 AND SET 0)
 11 QF
 8 FSTAND        (STANDARDISE FPA)
 +0
 4 FPA
 5 WS+28
 4 FPA+1
 5 WS+29
 4 FPA+2
 5 WS+30         (STORE FPA)
 4 LOK
 5 FPA
 4 EXIT+2
 5 LOK           (STORE FORMAT PARAMETER)
 4 +0
 5 FPA+1
 5 EXIT+2
 4 +17
 5 FPA+2         (FPA = P)
 11 QF
 8 FSTAND        (ENTER QF UNPACKED)
 12 LOGE2
 1 WS+28
   +0            (EXIT QF , FPA = LOG[A])
 4 LOK
 5 EXIT+2        (RESET FORMAT PARAMETER)
 4 LN
 5 QF
 8 INTERP
LOGE2 +90852
  +24543
   +0
LOV 6 +131071
 10 FPA
 8 LO
LOERR 0 ;+2
 8 QF+7          (ERROR)
 0 ;+1
 +52384
 +8526
 8 ;+1
 4 LN
 5 QF
FZERO 4 +0 (FPA:=0.0)
 5 FPA
 5 FPA+1
 5 FPA+2
 8 INTERP

LOK +0

EXP
QFEXP   +0
   +0            (EXIT QF)
 4 EXP
 5 QF            (SET RETURN)
 4 FPA+2
 9 EXNEGP        (TO EXNEGP IF P<0)
 1 -17
 9 EXPOSP        (TO EXPOSP IF -1<P<17)
 4 FPA
 9 EXZERO        (TO EXZERO IF P>16 AND B<0)
 0 ;+2
 8 QF+7          (ERROR)
 0 ;+1
   +50592
   +8664
 8 INTERP        (RESTART AT 9,TAKES EXP[X] = X)
EXZERO 8 FZERO        (EXP[X] = 0.0)
EXONE 4 -36
EXNEGP 1 +36     (P<0,DESTANDARDISE FPA SO THAT P = 0)
 9 EXONE
 1 =14 8156
 5 ;+4
 0 FPA+1
 14 1
 4 FPA
   +0
 5 FPA
 3 FPA+1
 4 +0
 5 FPA+2
EXPOSP  4 FPA+2  (NOW -1<P)
 1 =14 1
 5 ;+16          (SET SHIFT FOR F)
 1 =0 8175
 6 =14 8191
 5 ;+7           (SET SHIFT FOR I)
 4 LOG2E+1
 5 FPB+1
 4 LOG2E
 5 FPB
 11 LINK
 8 DLMULT+1      (FPA,FPA+1 = B*LOG2E)
   +0            (SHIFT TO GET I*2^-17)
 5 FPA+2
 10 FPA+2        (FPA+2 = [I+1]*2^-17)
 0 FPA+1
 14 1
 4 FPA
   +0            (SHIFT TO GET F)
 6 =15 8191
 1 =/8 0
 14 1
 5 FPB
 3 FPB+1         (FPB,FPB+1 = X)
 11 SERIES
 8 SERIES+1      (SUM SERIES)
   +0
   +1453
   +0
   +29363
   +3
   +112955
   +55
   +93527
   +643
   +3708
   +5566
   +21285
   +32121
   +12955
   +92681
   +117968
   +0
   -1
 8 INTERP
LOG2E   +94548
   +60581


<! Halt !>
