c demonstrate code procedures to access Algol formal parameters

c note using load-and-go system which uses issue 5 code procedure conventions.
on 903 16K
telecode 903
c load sir assembler
at ptr file  ..\903sir\sir(iss6)(5500).bin
j 8181

c assemble code procedures
at ptr inline

*+0

[SUM FIRST SIZE ADDRESS LJUMP SWJUMP SELECT PYTHAG INT2 IFL2]

SUM	/14	2		(two parameters)
	+0

	0	38		(FP - formal pointer)
	/0	6		(2nd parameter)
	/4	0		(call-by-name => indirect)
	0	38
	/1	3		(add 1st parameter)
	/5	0		(put result on stack)

	0	SUM+1		(exit)
	/8	1


FIRST 	/14 	1		(one parameter)
	+0

	0	38		(FP - formal pointer)
	/0	3		(1st parameter)
	/4	0		(pointer to array in store)
	5	ADDR
	0	ADDR
	/4	0		(first element of array)
	5	W		(word 1 of real)
	/4	1
	5	W+1		(word 2 of real)
	5	W+2
	0	38		(FP)
	6	&377600		(unpack real into result)
	/5	1
	4	W+2
	14	11
	14	8181
	/5	2
	4	W
	/5	0	

	0	FIRST+1		(return)
	/8	1


SIZE	/14	1		(one parameter)
	+0

	0	38		(FP - formal pointer)
	/0	3		(array pointers)
	/0	1		(pointer to array map)
	/4	1		(total size)
	0	38		(FP)
	/5	0		(put result on stack)

	0	SIZE+1		(return)
	/8	1


ADDRES 	/14	3		(three parameters)
	+0

	0	38		(FP - formal pointer)
	/4	6		(2nd argument)
	5	I		(integer by value)
	/4	9		(3rd argument)
	5	I+1
	/0 	3		(1st argument)
	/0	1		(address of map)
	4	I+1
	/12	4		(j*c1)
	14	17		(integer multiplication)
	1	I
	1	I		(+2*i)
	/1	2		(+offset)
	9	FAIL		(subscript out of range)
	/2	1
	9	FAIL
	7	FAIL
	/2	1		(restore relative address)
	0	38		(FP)
	/0	3		(pointer to array map)
	/1	0		(add address of array)
	6	&377777		(mask out top bit)
	0	38
	/5	0		(return as result)

	0	ADDRES+1
	/8	1		


FAIL	4	FMESAD		(output failure message)
	5	W
LOOP	0	W
	/4	0
	15	6148
	1	-20
	7	;+0
	10	W
	8	LOOP		


LJUMP	/14	1		(one parameter)
	+0

	4	32		(QACODL)
	0	38		(FP - formal pointer)	
	/2	3		(calculate address for jump)
	6	+8191
	1	=10 0
	5	ADDR
	4	PATADD
	0	37		(EP - entry pointer)
	/5	1		(return into Algol jump)
		
	0	LJUMP+1		(return)
	/8	1


SWJUMP	/14	2		(two parameters)
	+0

	0	38		(FP - formal pointer)
	/4	6		(2nd parameter)
	5	W		(integer by value)
	7	FAIL		(check subscript >= 0)
	9	FAIL
	/0	3		(1st parameter)
	4	W
	/2	0		(check subscript <= switch list size)
	9	FAIL	
	4	32		(QACODL)
	0	38
	/2	3		(address of switch list)
	1	W
	1	W
	1	-1		(address to jump to)
	6	+8191
	1	=10 0
	5	ADDR
	4	PATADD
	0	37		(EP - entry pointer)
	/5	1		(return into Algol jump)

	0	SWJUMP+1
	/8	1
		


SELECT	/14	2		(2 parameters)
	+0

	0	38		(FP - formal pointer)
	/4	6		(2nd parameter - integer by value)
	9	FAIL		(check N >=0)
	2	+0		(count up from -N)
	5	N
	4	+0
	5	QUOTES
	/4	3		(address of string)
	5	WORDAD
		
NEWWRD	4	=14 8180
	5	SHIFT
	0	WORDAD
	/4	0
SHIFT	>+1			(patched to shift right)
	6	&77
	5	CH		
	4	N		(at selected position?)
	9	NOTYET
	4	CH		(return CH as result)
	0	38
	/5	0

	0	SELECT+1
	/8	1

NOTYET	10	N		(continue count down)
	4	CH
	1	-7		(is CH a quote?)
	7	QUOT
	1	-25		(is CH an unquote [32])
	7	UNQUOT
SHFADJ	4	SHIFT		(update shift for next position)
	6	+8191
	7	NXTWD
	1	+6
	6	+8191
	1	=14 0
	5	SHIFT
	/4	0		(current word of string)
	8	SHIFT

NXTWD	10	WORDAD		(move to next word in string)
	8	NEWWRD

QUOT	10	QUOTES		(quote found)
	8	SHFADJ
UNQUOT	4	QUOTES		(unquote found)
	1	-1
	7	FAIL
	9	FAIL
	5	QUOTES
	8	SHFADJ



PYTHAG  /14	2		(two parameters)
	+0

	0	38		(FP - formal pointer)
	/4	3		(1st argument)
	5	R1
	/4	4
	5	R1+1
	/4 	5
	5	R1+2
	4	&200000
	5	R2		(2 = 0.5*4)
	4	+0
	5	R2+1
	4	+2
	5	R2+2	
	4	R1ADD
	5	80		(set up as workspace)
	0	40		(PBA - primitive base address)
	/0	40		(r1 := r1 ** r2)
	/11	0
	/8	1
	0	38
	/4	6		(2nd argument)
	5	R2
	5	R3
	/4	7
	5	R2+1
	5	R3+1
	/4 	8
	5	R2+2
	5	R3+2
	4	R2ADD
	5	80		(set up as workspace)
	0	40		(PBA - primitive base address)
	/0	35		(r2 := r2 * r3)
	/11	0
	/8	1
	4	R1ADD
	5	80
	0	40
	/0	31		(r1 := r1 + r2)
	/11	0
	/8	1
	0	38		(FP)
	4	R1
	/5	0		(copy to result)
	4	R1+1
	/5	1
	4	R1+2
	/5	2

	0	PYTHAG+1	(exit)
	/8	1	
	

INT2	/14 	0
	+0

	4	L2A
	5	2
	4	+0
	5	F

	0	INT2+1	
	/8	1

IFL2 	/14 	0
	+0

	4	F		(return flag)
	0	138
	/5	0	
	4	+0
	5	F

	0	IFL2+1
	/8	1

	(level 2 routine)
L2A	0 L2
L2	5	A		(save L4 A)
	4	+1		(set flag to show L2 interrupt taken)
	5	F
	4	A
	15	7168		(terminate)
	8	L2
	
	
F	>+1
A	>+1
Q	>+1

N	>+1
CH	>+1
WORDAD	>+1
QUOTES	>+1

R1	>+3
R2	>+3
R3	>+3

R1ADD	0 R1
R2ADD	0 R2	

I
W	>+3
WADD	0 W
ADDR
PATCH	>+1
PATADD	0 PATCH


FMESAD	0 FMESS
FMESS	+141
	+10
	+198
	+65
	+201
	+204
	+135
	+135
	+135
	+20

%

<! halt !>
<!!>
at ptp file demo8.rlb
j 8
de ptp

c compile algol
at ptr file alg16klg(iss5).bin
j 8181

at ptr inline
code procedures;
"begin"
	"integer" "array" A[1:100];
	"array" B[1:3, 2:3];

	"code" "procedure" int2; "algol";

	"code" "boolean" "procedure" ifl2; "algol";

	"code" 
		"integer" "procedure" sum (a, b);
		"value" a; "integer" a, b; 
	"algol"

	"code"
		"real" "procedure" pythag (a, b);
		"value" a, b; "real" a, b;
	"algol"

	"code" 
		"real" "procedure" first (B);
		"array" B;
	"algol";

	"code" 
		"integer" "procedure" size (A);
		"integer" "array" A; 
	"algol";

	"code" 
		"integer" "procedure" address (B, i, j);
		"value" i, j;
		"array" B; 
		"integer" i, j;
	"algol";

	"code" 
		"procedure" ljump (L);
		"label" L; 
	"algol";

	"code" 
		"procedure" swjump (SS, n);
		"value" n; "integer" n;
		"switch" SS; 
	"algol";

	"code" 
		"integer" "procedure" select (s, n);
		"value" n; "integer" n; 
		"string" s;
	"algol";

	"switch" sw := L1, L2, L3;

	"integer" i, j;

	punch(3); sameline;

	"comment" drop to level four;
	"print" 'Set up for level 2 interrupts...'L2``;
	int2;

	"comment" loop until interrupted;
	"for" i := 1 "while" "not" ifl2 "do";
	"print" 'Interrupt 2 taken'L2``;

	"comment" put distinctive data into arrays;
	"for" i := 1 "step" 1 "until" 100 "do" A[i] := i;
	"for" i := 1 "step" 1 "until" 3 "do"
		"for" j := 2 "step" 1 "until" 3 "do"
			B[i,j] := i*100+j;

	"comment" sum procedure;
	"for" i := 100 "step" 100 "until" 300 "do"
	    "for" j := 1 "step" 1 "until" 3 "do"
		"print" digits(3), i, ' +`, j, ' =`,  sum (i, j), ''L``;
        "print" ''L``;

	"comment" procedure to access first element of B;
	"print" 'B[1,2] =`, aligned (3, 1), B[1,2], ':`, first(B), ''L2``;

	"comment" procedure to calculate size of A;
	"print" 'Size of A = 100:`, digits(3),  size (A), ''L2``;

	"comment" procedure to calculate address of B[i, j];
	"for" i := 2 "step" 1 "until" 3 "do"
	    "for" j := 1 "step" 1 "until" 3 "do"
		"print" digits(1), 'Address of B[`, j, ',`, i, '] = `, 
			digits(8), address (B, j, i), ''L``;
	"print" ''L``;

	"comment" procedure to jump to a label;
	ljump (L1);
	"print" 'Gloom. Should have gone to L1...'L2``;
	stop;
L1:	"print" 'Arrived at L1'L2``;

	"comment" procedure to jump through a switch;
	swjump (sw, 3);
	"print" 'Gloom. Should have gone to L3...'L2``;
	stop;
L2:	"print" 'Gloom.  Arrived at L2...'L2``;
	stop;
L3:	"print" 'Arrived at L3'L2``;

	"comment" procedure to sum squares of two reals;
	"print" '3.0^2+4.0^2 = 25:`, pythag (3.0, 4.0), ''L2``;

	"comment" procedure to select a character from a string;
	"for" i := 0 "step" 1 "until" 16 "do"
		"print" digits(2), ''Q`my 'Q`string'U`'U` [`, i, ']=`, 
			digits(3), select ('my 'Q`string'U``, i), ''L``;

"end"
<! halt !>
<!!>
sel out tty
nonprinting off
j 8

c add code procedures
at ptr file DEMO8.rlb
j 14

c run program
step 500000
nonstop on
j 10
interrupt 2
restart

delete demo8.rlb

sh t