c Demonstrate Algol Elliott Simulation Package (ESP)

c set up algol
on 903 16K
telecode 903
at ptr file alg1(iss6).bin
j 8181
st 8171

at ptp file demo7.bin
c read matrix package 
at ptr file ..\ESP\ESP1(AJH).903
j 8
st 5368

c read test program
at ptr inline

"begin" "boolean" open; 
	"comment" open is true for 3600 minutes;
	"integer" truckswaiting;
	"comment" this is a count of the empty trucks waiting;
	"real" u1, u2;
	"boolean" "array" bayfree [1:4];
	"comment" bayfree[i] is true if bay i is free;
	"integer" "array" loadedtrucks [1:4];
	"comment" loadedtrucks[i] is a count of the trucks loaded 
		  by bay i;
	"switch" act:=beginload,truckarrive,finishload,
			shutwarehouse,results;
	"begin" "integer" i;
	"comment" this is the program entry point and this section
		  sets up the initial conditions of the system;
		prepare;
		open:= "true"; truckswaiting:=0;
		"for" i:=1 "step" 1 "until" 4 "do"
		"begin" bayfree[i]:="true";
			loadedtrucks[i]:=0
		"end";
		u1:=setrandom; u2:=setrandom;
		"comment" initializes two random number streams;
		call(1,10); 
		"comment" the first empty truck arrives in 10 minutes;
		call(3,3600);
		"comment" the warehouse closes in 3600 minutes;
		call(4,4000);
		"comment" output results after 4000 minutes, i.e. when all
			  other activity has ceased;
		"goto" act[next]
	"end";

truckarrive:
	"begin" 
	"comment" this section simulates the arrival of an empty truck.
		  it also calls itself so that a further truck will
		  arrive in due course. The process stops when 'open' 
		  becomes false;
		"if" open "then"
		"begin" truckswaiting:=truckswaiting+1;
			call(1,negexp(20,u1));
			"comment" now we simulate the random
				  arrival of an empty truck;
		"end";
		"goto" act[next]
	"end" This completes the setting up of the initial state;

beginload:
	"begin" 
	"comment" this is the set of conditional actions which starts
	          loading a truck whenever a loading bay and empty 
		  truck are available;
		"integer" i;
		"for" i:=1 "step" 1 "until" 4 "do"
		"if" bayfree[i] "and" truckswaiting "ne" 0 "then"
		"begin" bayfree[i]:="false";
			truckswaiting:=truckswaiting-1;
			"comment" the loading bay is busy and we
				  must compute when it becomes free again;
			send[0]:=1;send[1]:=i;
			call(2,random(40,80,u2));
			"comment" we thus make the loading time
				  of random length;
			loadedtrucks[i]:=loadedtrucks[i]+1
		"end";
		"goto" act[next]
	"end" the loading thus started will be terminated by the action
	      labelled 'finishload';

finishload:
	bayfree[get[1]]:="true";
	"comment" this action frees the bay after the loading started 
		  in 'beginload' has finished.  They bay's number i is 
		  in get[1] corresponding to the send[1] of the action
		  'beginload';
	"goto" act[next];

shutwarehouse:
	open:="FALSE";
	"comment" this action prevents the arrival of further empty trucks
		  since 'open' is tested by the action 'trucksarrive';
	"goto" act[next];

results:
	"begin" "integer" i;
		"print" punch(3), ''L2``;
		"for" i:=1 "step" 1 "until" 4 "do"
		"print" punch(3), '    Trucks loaded at bay`, sameline, 
			digits(2), i, ' = `, loadedtrucks[i], ''L``;
		stop
	"end" there will not be any more called events at this stage


"end"

"end"

"end" ESP

<! Halt !>
<!!>
j 9
de ptp
st 9


c run program
c read in large program interpreter
at ptr file alg16klp(iss6).bin
j 8181
st 4309

c load esp code procedures
at ptr file ..\esp\esp2(iss2a).rlb
j 12
st 15840

c load program
at ptr file demo7.bin 

c run program
select out tty
nonprinting off
at tty inline
R 1000
<!!>
c will run out of tty input
nonstop on
j 8

delete demo7.bin

sh t